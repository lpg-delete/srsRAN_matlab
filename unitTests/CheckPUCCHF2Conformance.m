%CheckPUCCHF2Conformance Battery of conformance tests for the PUCCH Format 2.
%   This class, based on the matlab.unittest.TestCase framework, performs a battery
%   of conformance tests on the PUCCH Format 2. Specifically, the tests are a
%   subset of those described in TS38.104 Section 8.3.4 and TS38.141 Section 8.3.3.
%   The tests consist in running a short simulation and ensuring that some metrics
%   (i.e., detection rate, false detection rate or decoder block error rate,
%   depending on the case) meet their target value.
%
%   CheckPUCCHF2Conformance Properties (Constant):
%
%   NSlots  - Number of simulated slots.
%
%   CheckPUCCHF2Conformance Properties (TestParameter):
%
%   TestConfig  - PUCCH Format 2 test configurations.
%
%   CheckPUCCHF2Conformance Methods (Test, TestTags = {'conformance'}):
%
%   checkPUCCHF2shortDetect      - Estimates the ACK detection rate for the given
%                                  PUCCH Format 2 configuration.
%   checkPUCCHF2shortFalseAlarm  - Estimates the false ACK detection rate for the
%                                  given PUCCH Format 2 configuration.
%   checkPUCCHF2long             - Estimates the UCI block error rate for the given
%                                  PUCCH Format 2 configuration.
%
%   Example
%      runtests('CheckPUCCHF2Conformance')
%
%   See also matlab.unittest, PUCCHBLER.

%   Copyright 2021-2024 Software Radio Systems Limited
%
%   This file is part of srsRAN-matlab.
%
%   srsRAN-matlab is free software: you can redistribute it and/or
%   modify it under the terms of the BSD 2-Clause License.
%
%   srsRAN-matlab is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
%   BSD 2-Clause License for more details.
%
%   A copy of the BSD 2-Clause License can be found in the LICENSE
%   file in the top-level directory of this distribution.

classdef CheckPUCCHF2Conformance < matlab.unittest.TestCase
    properties (Constant)
        %Number of simulated slots.
        NSlots = 20000;
    end % of properties (Constant)

    properties (TestParameter)
        %PUCCH Format 2 test configurations.
        %   Defines, for each test, the bandwidth, the subcarrier spacing, the number
        %   or receive antennas and the target SNR.
        TestConfig = generateTestConfig()
    end % of properties (TestParameter)

    methods (Test, TestTags = {'conformance'})
        function checkPUCCHF2shortDetect(obj, TestConfig)
        %Estimates the ACK detection rate for the given PUCCH Format 2 configuration.
        %   The probability of detection of an ACK is defined as the probability of detecting
        %   an ACK when the signal is present. The tests assume a 4-bit ACK. For more
        %   information, see TS38.104 Section 8.3.4.1 and TS38.141 Section 8.3.3.1.

            import matlab.unittest.fixtures.CurrentFolderFixture

            obj.applyFixture(CurrentFolderFixture('../apps/simulators/PUCCHBLER'));

            pp = obj.preparePUCCHshort(TestConfig);

            pp.TestType = 'Detection';

            mu = TestConfig.SubcarrierSpacing / 15;
            nFrames = obj.NSlots / 10 / 2^mu;
            try
                pp(TestConfig.SNRshort, nFrames);
            catch ME
                obj.assertFail(['PUCCHBLER simulation failed with error: ', ME.message]);
            end

            detectionRate = 1 - pp.BlockErrorRateSRS;
            obj.verifyGreaterThanOrEqual(detectionRate, 0.99, ...
                'WARNING: The PUCCH F2 ACK detection rate should be higher than 99%.');
            obj.assertGreaterThanOrEqual(detectionRate, 0.95, ...
                'ERROR: The PUCCH F2 ACK detection rate is below the hard acceptance threshold of 95%.');

            % TODO: export Detection Rate (and possibly other metrics) to grafana.

        end % of function checkPUCCHF2shortDetect(obj, TestConfig)

        function checkPUCCHF2shortFalseAlarm(obj, TestConfig)
        %Estimates the false ACK detection rate for the given PUCCH Format 2 configuration.
        %   The probability of false detection of the ACK is defined as the probability of
        %   erroneous detection of an ACK when the input is only noise. For more information,
        %   see TS38.141 Section 8.3.3.1.

            import matlab.unittest.fixtures.CurrentFolderFixture

            obj.applyFixture(CurrentFolderFixture('../apps/simulators/PUCCHBLER'));

            pp = obj.preparePUCCHshort(TestConfig);

            pp.TestType = 'False Alarm';

            mu = TestConfig.SubcarrierSpacing / 15;
            nFrames = obj.NSlots / 10 / 2^mu;
            try
                pp(TestConfig.SNRshort, nFrames);
            catch ME
                obj.assertFail(['PUCCHBLER simulation failed with error: ', ME.message]);
            end

            obj.verifyLessThanOrEqual(pp.FalseDetectionRateSRS, 0.01, ...
                'WARNING: The PUCCH F2 ACK detection rate should be lower than 1%.');
            obj.assertLessThanOrEqual(pp.FalseDetectionRateSRS, 0.05, ...
                'ERROR: The PUCCH F2 ACK detection rate is above the hard acceptance threshold of 5%.');

            % TODO: export False Detection Rate (and possibly other metrics) to grafana.
        end % of function checkPUCCHF2shortDetect(obj, TestConfig)

        function checkPUCCHF2long(obj, TestConfig)
        %Estimates the UCI block error rate for the given PUCCH Format 2 configuration.
        %   The UCI BLER is defined as the probability of incorrectly decoding the UCI
        %   information, if present. The payload is of 22 UCI bits, with no CSI Part 2.
        %   For more information, see TS38.104 Section 8.3.4.2 and TS38.141 Section 8.3.3.2.

            import matlab.unittest.fixtures.CurrentFolderFixture

            obj.applyFixture(CurrentFolderFixture('../apps/simulators/PUCCHBLER'));

            pp = obj.preparePUCCHlong(TestConfig);

            pp.TestType = 'Detection';

            mu = TestConfig.SubcarrierSpacing / 15 - 1;
            nFrames = obj.NSlots / 10 / 2^mu;
            try
                pp(TestConfig.SNRlong, nFrames);
            catch ME
                obj.assertFail(['PUCCHBLER simulation failed with error: ', ME.message]);
            end

            obj.verifyLessThanOrEqual(pp.BlockErrorRateSRS, 0.01, ...
                'WARNING: The PUCCH F2 UCI BLER should not be higher than 1%.');
            obj.assertLessThanOrEqual(pp.BlockErrorRateSRS, 0.05, ...
                'ERROR: The PUCCH F2 UCI BLER is above the hard acceptance threshold of 5%.');

            % TODO: export Detection Rate (and possibly other metrics) to grafana.

        end % of function checkPUCCHF2shortDetect(obj, TestConfig)

    end % of methods (Test, TestTags = {'conformance'})

    methods (Access = private)
        function pp = preparePUCCHshort(obj, TestConfig)
        %Configures a PUCCHBLER object for a UCI of 4 bits.

            import matlab.unittest.constraints.IsFile

            try
                pp = PUCCHBLER;
            catch ME
                obj.assertFail(['Could not create a PUCCHBLER object because of exception: ', ...
                    ME.message]);
            end

            obj.assertClass(pp, 'PUCCHBLER', 'The created object is not a PUCCHBLER object.');

            obj.assertThat('../../../+srsMEX/+phy/@srsPUCCHProcessor/pucch_processor_mex.mexa64', IsFile, ...
                'Could not find PUCCH processor mex executable.');

            pp.PUCCHFormat = 2;
            pp.SubcarrierSpacing = TestConfig.SubcarrierSpacing;
            pp.NSizeGrid = TestConfig.NSizeGrid;
            pp.PRBSet = 0:3;
            pp.SymbolAllocation = [13 1];
            pp.NumACKBits = 4;
            pp.NRxAnts = TestConfig.NRxAnts;
            pp.DelayProfile = 'TDLC300';
            pp.MaximumDopplerShift = 100;
            pp.ImplementationType = 'srs';
            pp.PerfectChannelEstimator = false;
            pp.QuickSimulation = false;
            pp.DisplaySimulationInformation = true;
        end % of function pp = preparePUCCHshort(obj, TestConfig)

        function pp = preparePUCCHlong(obj, TestConfig)
        %Configures a PUCCHBLER object for a UCI of 22 bits.

            import matlab.unittest.constraints.IsFile

            try
                pp = PUCCHBLER;
            catch ME
                obj.assertFail(['Could not create a PUCCHBLER object because of exception: ', ...
                    ME.message]);
            end

            obj.assertClass(pp, 'PUCCHBLER', 'The created object is not a PUCCHBLER object.');

            obj.assertThat('../../../+srsMEX/+phy/@srsPUCCHProcessor/pucch_processor_mex.mexa64', IsFile, ...
                'Could not find PUCCH processor mex executable.');

            pp.PUCCHFormat = 2;
            pp.SubcarrierSpacing = TestConfig.SubcarrierSpacing;
            pp.NSizeGrid = TestConfig.NSizeGrid;
            pp.PRBSet = 0:8;
            pp.SymbolAllocation = [12 2];
            pp.NumACKBits = 22;
            pp.NRxAnts = TestConfig.NRxAnts;
            pp.DelayProfile = 'TDLC300';
            pp.MaximumDopplerShift = 100;
            pp.ImplementationType = 'srs';
            pp.PerfectChannelEstimator = false;
            pp.QuickSimulation = false;
            pp.DisplaySimulationInformation = true;
            % TODO: enable intra-slot frequency hopping when ready in srsRAN.
        end % of function pp = preparePUCCHshort(obj, TestConfig)
    end % of methods (Access = private)
end % of classdef CheckPUCCHF2Conformance < matlab.unittest.TestCase

function TestConfig = generateTestConfig()
    TestConfig = { ...
        struct( ...
            'Table',             'TS38.104 V15.19.0 Table 8.3.4.x.2-1', ...
            'NRxAnts',           2, ...
            'SubcarrierSpacing', 15, ...
            'NSizeGrid',         25, ... 5 MHz ...
            'SNRshort',          5.8, ...
            'SNRlong',           0.2 ...
        ), ...
        struct( ...
            'Table',             'TS38.104 V15.19.0 Table 8.3.4.x.2-1', ...
            'NRxAnts',           4, ...
            'SubcarrierSpacing', 15, ...
            'NSizeGrid',         25, ... 5 MHz ...
            'SNRshort',          0.4, ...
            'SNRlong',           -3.6 ...
        ), ...
        struct( ...
            'Table',             'TS38.104 V15.19.0 Table 8.3.4.x.2-1', ...
            'NRxAnts',           2, ...
            'SubcarrierSpacing', 15, ...
            'NSizeGrid',         52, ... 10 MHz ...
            'SNRshort',          5.6, ...
            'SNRlong',           0.8 ...
        ), ...
        struct( ...
            'Table',             'TS38.104 V15.19.0 Table 8.3.4.x.2-1', ...
            'NRxAnts',           4, ...
            'SubcarrierSpacing', 15, ...
            'NSizeGrid',         52, ... 10 MHz ...
            'SNRshort',          0.5, ...
            'SNRlong',           -3.2 ...
        ), ...
        struct( ...
            'Table',             'TS38.104 V15.19.0 Table 8.3.4.x.2-1', ...
            'NRxAnts',           2, ...
            'SubcarrierSpacing', 15, ...
            'NSizeGrid',         106, ... 20 MHz ...
            'SNRshort',          5.9, ...
            'SNRlong',           1.2 ...
        ), ...
        struct( ...
            'Table',             'TS38.104 V15.19.0 Table 8.3.4.x.2-1', ...
            'NRxAnts',           4, ...
            'SubcarrierSpacing', 15, ...
            'NSizeGrid',         106, ... 20 MHz ...
            'SNRshort',          0.3, ...
            'SNRlong',           -3.2 ...
        ), ...
        struct( ...
            'Table',             'TS38.104 V15.19.0 Table 8.3.4.x.2-2', ...
            'NRxAnts',           2, ...
            'SubcarrierSpacing', 30, ...
            'NSizeGrid',         24, ... 10 MHz ...
            'SNRshort',          5.5, ...
            'SNRlong',           0.5 ...
        ), ...
        struct( ...
            'Table',             'TS38.104 V15.19.0 Table 8.3.4.x.2-2', ...
            'NRxAnts',           4, ...
            'SubcarrierSpacing', 30, ...
            'NSizeGrid',         24, ... 10 MHz ...
            'SNRshort',          0.3, ...
            'SNRlong',           -3.3 ...
        ), ...
        struct( ...
            'Table',             'TS38.104 V15.19.0 Table 8.3.4.x.2-2', ...
            'NRxAnts',           2, ...
            'SubcarrierSpacing', 30, ...
            'NSizeGrid',         51, ... 20 MHz ...
            'SNRshort',          5.6, ...
            'SNRlong',           1.1 ...
            ), ...
        struct( ...
            'Table',             'TS38.104 V15.19.0 Table 8.3.4.x.2-2', ...
            'NRxAnts',           4, ...
            'SubcarrierSpacing', 30, ...
            'NSizeGrid',         51, ... 20 MHz ...
            'SNRshort',          0.2, ...
            'SNRlong',           -2.9 ...
            ), ...
        struct( ...
            'Table',             'TS38.104 V15.19.0 Table 8.3.4.x.2-2', ...
            'NRxAnts',           2, ...
            'SubcarrierSpacing', 30, ...
            'NSizeGrid',         106, ... 40 MHz ...
            'SNRshort',          5.5, ...
            'SNRlong',           0.4 ...
            ), ...
        struct( ...
            'Table',             'TS38.104 V15.19.0 Table 8.3.4.x.2-2', ...
            'NRxAnts',           4, ...
            'SubcarrierSpacing', 30, ...
            'NSizeGrid',         106, ... 40 MHz ...
            'SNRshort',          0.3, ...
            'SNRlong',           -3.3 ...
            ), ...
        struct( ...
            'Table',             'TS38.104 V15.19.0 Table 8.3.4.x.2-2', ...
            'NRxAnts',           2, ...
            'SubcarrierSpacing', 30, ...
            'NSizeGrid',         273, ... 100 MHz ...
            'SNRshort',          5.7, ...
            'SNRlong',           0.3 ...
            ), ...
        struct( ...
            'Table',             'TS38.104 V15.19.0 Table 8.3.4.x.2-2', ...
            'NRxAnts',           4, ...
            'SubcarrierSpacing', 30, ...
            'NSizeGrid',         273, ... 100 MHz ...
            'SNRshort',          0.4, ...
            'SNRlong',           -3.4 ...
            )
    };
end
