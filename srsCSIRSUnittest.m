%srsCSIRSUnittest Unit tests for NZP-CSI-RS processor functions.
%   This class implements unit tests for the NZP-CSI-RS processor functions using the
%   matlab.unittest framework. The simplest use consists in creating an object with
%       testCase = srsCSIRSUnittest
%   and then running all the tests with
%       testResults = testCase.run
%
%   srsCSIRSUnittest Properties (Constant):
%
%   srsBlock      - The tested block (i.e., 'csi_rs_processor').
%   srsBlockType  - The type of the tested block, including layer
%                   (i.e., 'phy/upper/signal_processors').
%
%   srsCSIRSUnittest Properties (ClassSetupParameter):
%
%   outputPath - Path to the folder where the test results are stored.
%
%   srsCSIRSUnittest Properties (TestParameter):
%
%   RowNumber     - CSI-RS table row number (0, 1, ..., 12).
%   Numerology    - Defines the subcarrier spacing (0, 1, 2, 3, 4).
%   CyclicPrefix  - Carrier Cyclic Prefix formats.
%   Density       - Defines the resource density of the mapping.
%   k_0           - Frequency domain location reference 0.
%   l_0           - Time domain location reference 0.
%  
%   srsCSIRSUnittest Methods (TestTags = {'testvector'}):
%
%   testvectorGenerationCases - Generates a test vectors according to the provided
%                               parameters.
%
%   srsCSIRSUnittest Methods (Access = protected):
%
%   addTestIncludesToHeaderFile     - Adds include directives to the test header file.
%   addTestDefinitionToHeaderFile   - Adds details (e.g., type/variable declarations)
%                                     to the test header file.
%
%  See also matlab.unittest.
classdef srsCSIRSUnittest < srsTest.srsBlockUnittest
    properties (Constant)
        %Name of the tested block.
        srsBlock = 'csi_rs_processor'

        %Type of the tested block.
        srsBlockType = 'phy/upper/signal_processors'
    end

    properties (ClassSetupParameter)
        %Path to results folder (old 'csi_rs_processor' tests will be erased).
        outputPath = {['testCSIRS', char(datetime('now', 'Format', 'yyyyMMdd''T''HHmmss'))]}
    end

    properties (TestParameter)

        %CSI-RS mapping format, as specified by the row RowNumber in
        %   TS38.211, Table 7.4.1.5.3-1 (0, 1, ..., 12).
        RowNumber = num2cell(1:12)
        
        %Defines the subcarrier spacing (0, 1, 2, 3, 4).
        Numerology = {0 2}

        %Carrier Cyclic Prefix options.
        CyclicPrefix = {'normal' 'extended'}

        %Resource Element density for the CSI-RS mapping.
        %  Only the valid densities will be tested, according to the
        %  specified mapping table row.
        Density = {'three' 'dot5odd' 'dot5even' 'one'}
   
        %Frequency domain location 0 within the PRB. Values that map 
        %   elements outside the PRB boundaries will be skipped. Successive
        %   k_i values are generated by incrementing k_0 in steps of 2.
        k_0 = {0 6}

        %Time domain location 0 within the PRB. Values that map elements
        %   outside the PRB boundaries will be skipped.
        l_0 = {0 8}

    end

    methods (Access = protected)
        function addTestIncludesToHeaderFile(obj, fileID)
        %addTestIncludesToHeaderFile Adds include directives to the test header file.
            addTestIncludesToHeaderFilePHYsigproc(obj, fileID);
        end

        function addTestDefinitionToHeaderFile(obj, fileID)
        %addTestDetailsToHeaderFile Adds details (e.g., type/variable declarations) to the test header file.
            addTestDefinitionToHeaderFilePHYsigproc(obj, fileID);
        end

    end % of methods (Access = protected)

    methods (Test, TestTags = {'testvector'})
        function testvectorGenerationCases(testCase, RowNumber, Numerology, Density, CyclicPrefix, k_0, l_0)
        %testvectorGenerationCases Generates a test vector for the given RowNumber,
        %   Numerology, Density, k_0, and l_0. 
        %   NCellID, NSlot and PRB occupation are randomly generated.
        %   Scrambling ID and symbol amplitude are also random.

            import srsTest.helpers.cellarray2str
            import srsTest.helpers.writeResourceGridEntryFile
            import srsTest.helpers.matlab2srsCyclicPrefix

            import srsMatlabWrappers.phy.helpers.srsConfigureCarrier
            import srsMatlabWrappers.phy.helpers.srsConfigureCSIRS
            import srsMatlabWrappers.phy.upper.signal_processors.srsCSIRSnzp
            import srsMatlabWrappers.phy.helpers.srsCSIRSGetNofFreqRefs
            import srsMatlabWrappers.phy.helpers.srsCSIRSValidateConfig

            % Current fixed parameter values.
            NSizeGrid = 272;
            NStartGrid = 0;

            % Precoding is currently unsupported.
            pmi = 0;

            % The l_1 symbol location reference is not used in any of the
            % currently supported mapping options.
            l_1 = 0;
          
            % Set NZP-CSI-RS in all slots.
            CSIRSType = 'nzp';           
            CSIRSPeriod = 'on';
                                   
            % Generate a unique test ID
            TestID = testCase.generateTestID;
            
            % Use a random NCellID, NFrame, NSlot, scrambling ID, PRB allocation and amplitude
            % for each test.
            NCellID = randi([0, 1007]);
            NFrame = randi([0, 1023]);
            
            switch(Numerology)
                case 0
                    NSlot = randi([0, 9]);                    
                case 1
                    NSlot = randi([0, 19]);
                case 2 
                    NSlot = randi([0, 39]);
                case 3
                    NSlot = randi([0, 79]);
                case 4
                    NSlot = randi([0, 159]);
                otherwise
                    return;
            end                                   
            
            NumRB = randi([4, floor(NSizeGrid)]);
            RBOffset = randi([0, NSizeGrid - NumRB]);                       
            NID = randi([0, 1023]);
            amplitude = 0.1 * randi([1, 100]);

            % Generate the remaining location references.
            nofKiRefs = srsCSIRSGetNofFreqRefs(RowNumber);
            
            SubcarrierLocations = zeros(nofKiRefs, 1);
            for i = 1 : nofKiRefs
                SubcarrierLocations(i) = k_0 + 2 * (i - 1);
            end           

            SubcarrierLocations = {SubcarrierLocations};
            SymbolLocations = {l_0};

            SubcarrierSpacing = 15 * (2 .^ Numerology);
            
            % Configure the carrier according to the test parameters.
            Carrier = srsConfigureCarrier(NCellID, SubcarrierSpacing, ...
                NSizeGrid, NStartGrid, NSlot, NFrame, CyclicPrefix);

            if (isempty(Carrier))
                return;
            end

            % Create the CSIRS configuration for the MATLAB processor.            
            CSIRS = srsConfigureCSIRS(Density, RowNumber, SymbolLocations, ...
                SubcarrierLocations, NumRB, NID, RBOffset, CSIRSType, CSIRSPeriod);
       
            if (isempty(CSIRS))
                return;
            end

            % Invalid test case configurations are skipped.
            if (~srsCSIRSValidateConfig(Carrier, CSIRS))
                return;
            end

            % Call the CSI-RS processor MATLAB functions.
            [CSIRSsymbols, symbolIndices] = srsCSIRSnzp(Carrier, CSIRS, amplitude);

            % Write the generated NZP-CSI-RS sequence into a binary file.
            testCase.saveDataFile('_test_output', TestID, ...
                @writeResourceGridEntryFile, CSIRSsymbols, symbolIndices);

            % Generate a 'slot_point' configuration string.
            slotPointConfig = cellarray2str({Numerology, NFrame, ...
                floor(NSlot / Carrier.SlotsPerSubframe), ...
                rem(NSlot, Carrier.SlotsPerSubframe)}, true);             

            % Generate the CP string for the test header file.
            CyclicPrefixStr = matlab2srsCyclicPrefix(CyclicPrefix);

            % Generate the Density string for the test header file.
            DensityStr = matlab2srsCSIRSDensity(Density);

            % Generate the CDM type string for the test header file.
            CDMStr = matlab2srsCDMType(CSIRS.CDMType);
           
            % Generate the Subcarrier indices string.
            SubcarrierRefStr = cellarray2str(SubcarrierLocations, true);
            
            % Generate the ports configuration string.
            CSIRSports = 0:CSIRS.NumCSIRSPorts - 1;
            CSIRSportsStr = cellarray2str({CSIRSports}, true);

            % Generate the test case entry
            testCaseString = testCase.testCaseToString(TestID, ...
                {slotPointConfig, CyclicPrefixStr, RBOffset, NumRB, RowNumber, ...
                SubcarrierRefStr, l_0, l_1, CDMStr, DensityStr, NID, amplitude, ...
                pmi, CSIRSportsStr}, true, '_test_output');

            % Add the test to the file header
            testCase.addTestToHeaderFile(testCase.headerFileID, testCaseString);
        end % of function testvectorGenerationCases
    end % of methods (Test, TestTags = {'testvector'})
end % of classdef srsCSIRSUnittest

function DensityStr = matlab2srsCSIRSDensity (Density)
% matlab2srsCSIRSDensity Generates the Density string to be used in the test header file.
    DensityStr = 'csi_rs_freq_density::';
    if (strcmp(Density, 'one'))
        DensityStr = [DensityStr 'ONE'];
    elseif (strcmp(Density, 'dot5odd'))
        DensityStr = [DensityStr 'DOT5_ODD_RB'];
    elseif (strcmp(Density, 'dot5even'))
        DensityStr = [DensityStr 'DOT5_EVEN_RB'];
    elseif (strcmp(Density, 'three'))
        DensityStr = [DensityStr 'THREE'];
    end
end

function CDMStr = matlab2srsCDMType(CDMType)
 % matlab2srsCDMType Generates the CDM string to be used in the test header file.
    if (strcmp(CDMType, 'FD-CDM2'))
        CDMStr = 'csi_rs_cdm_type::FD_CDM2';
    elseif (strcmp(CDMType, 'noCDM'))
        CDMStr = 'csi_rs_cdm_type::NO_CDM';
    elseif (strcmp(CDMType, 'CDM4'))
        CDMStr = 'csi_rs_cdm_type::CDM4_FD2_TD2';
    else
        CDMStr = 'csi_rs_cdm_type::CDM8_FD2_TD4';
    end
end
